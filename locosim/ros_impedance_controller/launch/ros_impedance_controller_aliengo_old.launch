<?xml version="1.0" ?>
<launch>
	<arg name="robot_name" default="aliengo" />

        <arg name="rviz" default="true" />
        <arg name="gui" default="true" />
        <arg name="rviz_conf" default="$(find ros_impedance_controller)/config/operator.rviz"/>
	<arg name="world_name" default="$(find ros_impedance_controller)/worlds/solo.world"/>
        <arg name="gazebo" default="true" />

	<arg name="task_period" default="0.001" />
	<arg name="new_gazebo_version" default="true" />

	<arg name="spawn_x" default="0.0" />
	<arg name="spawn_y" default="0.0" />
	<arg name="spawn_z" default="1.0" />

        <!-- load robot name into param server-->
        <param name="robot_name" type="str" value="$(arg robot_name)" />
	<param name="task_period"  value="$(arg task_period)" />


     
  

       <!-- Send the robot urdf to parameter server -->
        <include file="$(find wolf_description_utils)/launch/upload.launch">
            <arg name="sensors" value="false" />
            <arg name="task_period" value="$(arg task_period)" />
            <arg name="robot_name" value="$(arg robot_name)" />
	</include>

        <group if="$(arg gazebo)">
            <!-- 1 launch gzserver (with empty world)/ gzcclient -->
            <include file="$(find gazebo_ros)/launch/empty_world.launch" >
                    <arg name="world_name" value="$(arg world_name)"/>
                    <arg name="paused" value="false" />
                    <arg name="use_sim_time" value="true" />
                    <arg name="gui" value="$(arg gui)" />
                    <arg name="headless" value="false" />
                    <arg name="debug" value="false" />
                    <arg name="verbose" value="true" />
            </include>

            <!-- 3 Spawn a robot into Gazebo -->
            <node name="spawn_aliengo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param gazebo_robot_description -model aliengo -x $(arg spawn_x) -y $(arg spawn_y) -z $(arg spawn_z)"/>

            <!-- Spawn and set the robot to the stand down position loaded from the SRDF file -->  
            <node name="goto0" pkg="wolf_description_utils" type="go0"  output="screen"/>
      </group>

      <group unless="$(arg gazebo)">
            <!-- Spawn the hardware interface -->
            <node name="aliengo_hardware_interface" pkg="wolf_aliengo_interface" type="aliengo_ros_node" respawn="false" />
        </group>


        <!-- 4 -Loading  controller configurations from YAML file to parameter server -->
        <rosparam file="$(find ros_impedance_controller)/config/joint_state_publisher.yaml" ns="/$(arg robot_name)" command="load"/>
     
        <rosparam file="$(find aliengo_description)/config/ros_impedance_controller.yaml" ns="/$(arg robot_name)" command="load"/>


         <!-- 5  - Loading the controllers (joint state publisher (install ros-kinetic-joint-state-controller) is necessary for robot_state publisher to compute the TFs) -->
        <node name="ros_impedance_controller" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" ns="/$(arg robot_name)" args="joint_state_publisher ros_impedance_controller"/>

        <!--  rviz stuff -->
        <!-- 6- load robot_state_publisher: converts joint states to TF transforms, it is just for rviz, etc -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
		<remap from="/joint_states" to="/$(arg robot_name)/joint_states"/> 
	</node>
        <!-- 7 run rviz -->
        <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_conf) -f world" if="$(arg rviz)"/>
</launch>

