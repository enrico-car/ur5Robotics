<?xml version="1.0" ?>
<launch>
	<arg name="robot_name" default="solo_fw" />
        <arg name="rviz" default="true" />
        <arg name="gui" default="true" />
        <arg name="rviz_conf" default="$(find ros_impedance_controller)/config/operator.rviz"/>
        <arg name="world_name" default="solo.world"/>

	<!-- if task_period is smaller than sim max_step_size (in world file) it is clamped to that value!!!!!!-->
	<arg name="task_period" default="0.001" />
     	<arg name="new_gazebo_version" default="true" />

	<arg name="spawn_x" default="0.0" />
	<arg name="spawn_y" default="0.0" />
	<arg name="spawn_z" default="0.3" />


        <arg name="flywheel2" default="true" />
        <arg name="angle_deg" default="0.0" />
        <arg name="flywheel4" default="false" />
		
        <!-- load robot name into param server for urdf generation-->
        <param name="robot_name" type="str" value="$(arg robot_name)" />
	<param name="flywheel2" type="str" value="$(arg flywheel2)" />
	<param name="angle_deg" type="double" value="$(arg angle_deg)" />
	<param name="flywheel4" type="str" value="$(arg flywheel4)" />

         <!-- 1 launch gzserver / gzcclient -->
        <include file="$(find gazebo_ros)/launch/empty_world.launch" >
		<arg name="world_name" value="$(find ros_impedance_controller)/worlds/$(arg world_name)"/>
                <arg name="paused" default="false" />
                <arg name="use_sim_time" default="true" />
                <arg name="gui" value="$(arg gui)" />
                <arg name="headless" default="false" />
                <arg name="debug" default="false" />
                <arg name="verbose" value="true" />
        </include>

	<!-- 2 - load the robot URDF /SRDF into param server (this will have to contain ros_control plugin and transmissions) -->
        <!-- to set the task_period  you need to regenerate the urdf from hyq description by changing <updateRate> of plugin libgazebo_ros_p3d.so-->       
	<arg name="find_robot_description" value="$(eval find(robot_name+'_description'))"/>
        <param name="robot_description" command="$(find xacro)/xacro --inorder '$(arg find_robot_description)/robots/$(arg robot_name).urdf.xacro' 
			new_gazebo_version:=$(arg new_gazebo_version)  
			task_period:=$(arg task_period)  
			flywheel4:=$(arg flywheel4) 
			flywheel2:=$(arg flywheel2) 
			angle_deg:=$(arg angle_deg)" />      
	<!-- send solo semantic description srdf to param server -->
        <param name="robot_semantic_description" command="$(find xacro)/xacro --inorder '$(arg find_robot_description)/robots/$(arg robot_name).srdf.xacro'" />

        <!-- 3 Spawn a robot into Gazebo -->
        <node name="spawn_solo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model $(arg robot_name) -x $(arg spawn_x) -y $(arg spawn_y) -z $(arg spawn_z)"/>


	<!-- 4  Get robot to 0 position -->
        <node name="goto0" pkg="$(arg robot_name)_description" type="go0" args="1.0"  />


        <!-- 5 Loading  controllers configurations from YAML file to parameter server -->
        <rosparam file="$(find ros_impedance_controller)/config/joint_state_publisher.yaml" ns="/$(arg robot_name)" command="load"/>
       
 	<group if="$(arg flywheel4)">
            <rosparam file="$(arg find_robot_description)/config/ros_impedance_controller_solo_fw4.yaml" ns="/$(arg robot_name)" command="load"/>
        </group>
        <group if="$(arg flywheel2)">
            <rosparam file="$(arg find_robot_description)/config/ros_impedance_controller_solo_fw2.yaml" ns="/$(arg robot_name)" command="load"/>
        </group>
        <group unless="$(arg flywheel4)">
            <group unless="$(arg flywheel2)">
                <rosparam file="$(arg find_robot_description)/config/ros_impedance_controller_solo.yaml" ns="/$(arg robot_name)" command="load"/>
            </group>
         </group>


        <!-- 6 Loading the controllers into the controller manager -->
        <node name="ros_impedance_controller" pkg="controller_manager" type="spawner" respawn="false"
		        output="screen" ns="/$(arg robot_name)" args="joint_state_publisher ros_impedance_controller"/>

        <!-- rviz stuff -->
        <!-- 7- load robot_state_publisher: converts joint states to TF transforms, it is just for rviz, etc -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
		<remap from="/joint_states" to="/$(arg robot_name)/joint_states"/> 
	</node>
        <!-- 8 run rviz -->
        <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_conf) -f world" if="$(arg rviz)"/>
</launch>

